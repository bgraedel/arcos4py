"""Module to plot different metrics generated by arcos4py functions.

Example:
    >>> from arcos4py.plotting import plotOriginalDetrended
    >>> plot = arcosPlots(data, 'time', 'meas', 'detrended', 'id')
    >>> plot.plot_detrended()
"""

from __future__ import annotations

import matplotlib
import matplotlib.pyplot as plt
import numpy as np
import pandas as pd
import seaborn as sns


class dataPlots:
    """Plot different metrics of input data.

    Attributes:
        data (Dataframe): containing ARCOS data.
        frame (str): name of frame column in data.
        measurement (str): name of measurement column in data.
        id (str): name of track id column.
    """

    def __init__(self, data: pd.DataFrame, frame: str, measurement: str, id: str):
        """Plot different metrics such as histogram, position-t and density.

        Arguments:
            data (Dataframe): containing ARCOS data.
            frame (str): name of frame column in data.
            measurement (str): name of measurement column in data.
            id (str): name of track id column.
        """
        self.data = data
        self.id = id
        self.frame = frame

    def position_t_plot(self, posCol: set[str] = {'x'}, n: int = 20):
        """Plots X and Y over T to visualize tracklength.

        Arguments:
            posCol (set): containing names of position columns in data.
            n (int): number of samples to plot.
        """
        sample = pd.Series(self.data[self.id].unique()).sample(n)
        pd_from_r_df = self.data.loc[self.data[self.id].isin(sample)]
        fig, axes = plt.subplots(1, len(posCol), figsize=(6, 3))
        for label, df in pd_from_r_df.groupby(self.id):
            for index, value in enumerate(posCol):
                df.plot(x=self.frame, y=value, ax=axes[index], legend=None)
        for index, value in enumerate(posCol):
            axes[index].set_title(value)
        plt.show()

    def density_plot(self, measurement_col: str, *args, **kwargs):
        """Density plot of measurement.

        Uses Seaborn distplot to plot measurement density.

        Arguments:
            measurement_col (str): name of measurement column.
            *args (Any): arguments passed on to seaborn histplot function.
            **kwargs (Any): keyword arguments passed on to seaborn histplot function.
        """
        sns.displot(self.data[measurement_col], kind="kde", palette="pastel", label=measurement_col, *args, **kwargs)

        # Plot formatting
        plt.legend(prop={'size': 10})
        plt.title('Density Plot of Measurement')
        plt.xlabel('Measurement')
        plt.ylabel('Density')
        plt.show()

    def histogram(self, bins: str = 'auto', *args, **kwargs):
        """Histogram of tracklenght.

        Uses seaborn histplot function to plot tracklenght histogram.

        Arguments:
            bins (str): number or width of bins in histogram
            *args (Any): arguments passed on to seaborn histplot function.
            **kwargs (Any): keyword arguments passed on to seaborn histplot function.
        """
        # Draw histogram
        track_length = self.data.groupby(self.id).size()
        sns.histplot(track_length, label="Track Length", bins=bins, *args, **kwargs)

        # Plot formatting
        plt.title('Track length Histogram')
        plt.xlabel('Track Length')
        plt.ylabel('Count')
        plt.show()


class plotOriginalDetrended:
    """Plot different detrended vs original data.

    Attributes:
        data (Dataframe): containing ARCOS data.
        frame (str): name of frame column in data.
        measurement (str): name of measurement column in data.
        detrended (str): name of detrended column with detrended data.
        id (str): name of track id column.
    """

    def __init__(self, data: pd.DataFrame, frame: str, measurement: str, detrended: str, id: str):
        """Plot detrended vs original data.

        Arguments:
            data (Dataframe): containing ARCOS data.
            frame (str): name of frame column in data.
            measurement (str): name of measurement column in data.
            detrended (str): name of detrended column with detrended data.
            id (str): name of track id column.
        """
        self.data = data
        self.measurement = measurement
        self.detrended = detrended
        self.id = id
        self.frame = frame

    def plot_detrended(
        self, n_samples: int = 25, subplots: tuple = (5, 5), plotsize: tuple = (20, 10)
    ) -> matplotlib.axes.Axes:
        """Method to plot detrended vs original data.

        Arguments:
            n_samples (int): Number of tracks to plot.
            subplots (tuple): Number of subplots, should be approx. one per sample.
            plotsize (tuple): Size of generated plot.

        Returns:
            Matplotlib figure of detrended vs original data.

        """
        vals = np.random.choice(self.data[self.id].unique(), n_samples, replace=False)
        self.data = self.data.set_index(self.id).loc[vals].reset_index()
        grouped = self.data.groupby(self.id)

        ncols = subplots[0]
        nrows = subplots[1]

        fig, axes = plt.subplots(nrows=nrows, ncols=ncols, figsize=plotsize, sharey=True)

        for (key, ax) in zip(grouped.groups.keys(), axes.flatten()):
            grouped.get_group(key).plot(x=self.frame, y=[self.measurement, self.detrended], ax=ax)
            ax.get_legend().remove()

        handles, labels = ax.get_legend_handles_labels()
        fig.legend(handles, labels, loc="lower right")
        return fig


class statsPlots:
    """Plot data generated by the stats module.

    Attributes:
        data (DataFrame): containing ARCOS stats data.
    """

    def __init__(self, data: pd.DataFrame):
        """Plot detrended vs original data.

        Arguments:
            data (DataFrame): containing ARCOS stats data.
        """
        self.data = data

    def plot_events_duration(self, total_size: str, duration: str, point_size: int = 40, *args, **kwargs):
        """Scatterplot of collective event duration.

        Arguments:
            total_size (str): name of total size column.
            duration (str):, name of column with collective event duration.
            point_size (int): scatterplot point size.
            *args (Any): Arguments passed on to seaborn scatterplot function.
            **kwargs (Any): Keyword arguments passed on to seaborn scatterplot function.
        """
        plot = sns.scatterplot(x=self.data[total_size], y=self.data[duration], s=point_size, *args, **kwargs)
        return plot
